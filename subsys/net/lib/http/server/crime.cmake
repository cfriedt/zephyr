# Copyright 2023 Meta
# SPDX-License-Identifier: Apache-2.0

function(http_server_generate_crime_res
    service_id      # Service identifier (valid C identifier)
    target          # CMake target (for dependencies / headers)
    in_dir          # The input directory of uncompressed resources
    )

    # name of this script relative to ZEPHYR_BASE
    set(generator "zephyr/subsys/net/lib/http/server/crime.cmake")

    set(out_dir ${ZEPHYR_BINARY_DIR}/generated/http_server/${service_id})
    file(GLOB in_files ${in_dir}/**/*)
    list(TRANSFORM in_files REPLACE ${in_dir}/ "")

    # message(STATUS "@@@: service_id ${service_id}")
    # message(STATUS "@@@: target ${target}")
    # message(STATUS "@@@: in_dir ${in_dir}")
    # message(STATUS "@@@: out_dir ${out_dir}")
    message(STATUS "@@@: in_files ${in_files}")
  
    set(seed)
    foreach(file ${in_files})
      message(STATUS "@@@: file ${file}")
      generate_inc_file_for_target(${target} ${in_dir}/${file} ${out_dir}/${file}.inc --gzip)
      file(MD5 ${in_dir}/${file} file_hash)
      string(APPEND seed "${in_dir}/${file}:${file_hash}")
    endforeach()

    # include the right output dir
    target_include_directories(${target} PRIVATE ${CMAKE_CURRENT_BINARY_DIR})

    # create CRiMe Resource file
    # this is a unique (but consistent) filename based on the hashed names and contents of all
    # files under ${in_dir}. This is nice because it allows multiple directories to be specified
    # for static resources for a given service. Each resources is merged to the iterable section.
    # A build-time error results if there are duplicate resources (URNs) for a given service.
    string(MD5 unique ${seed})
    set(crime_res_c ${ZEPHYR_BINARY_DIR}/generated/http_server/${service_id}/${unique}.c)

    # head matter
    file(WRITE ${crime_res_c}
      "/* generated by ${generator} */\n"
      "#include <stddef.h>\n"
      "#include <stdint.h>\n"
      "\n"
      "#include <zephyr/sys/util.h>\n"
      "#include <zephyr/toolchain.h>\n"
      "\n"
    )

    # crime data
    foreach(file ${in_files})
      set(out_file ${out_dir}/${file}.inc)
      string(REGEX REPLACE "[^A-Za-z0-9_]" "_" var ${file})
      file(APPEND ${crime_res_c}
        "__used\n"
        "static const uint8_t ${var}_crime_data[] = {\n"
        "#include \"${out_file}\"\n"
        "};\n"
        "\n"
      )
    endforeach()

    # service crime data pointers
    file(APPEND ${crime_res_c}
      "/* Array of crime data pointers for ${service_id} */\n"
      "__used\n"
      "static const uint8_t *${service_id}_crime_data[] = {\n"
    )
    foreach(file ${in_files})
      string(REGEX REPLACE "[^A-Za-z0-9_]" "_" var ${file})
      file(APPEND ${crime_res_c} "  ${var}_crime_data,\n")
    endforeach()
    file(APPEND ${crime_res_c}
      "};\n"
      "\n"
    )

    # service crime data sizes
    file(APPEND ${crime_res_c}
      "/* Array of sizes of crime data for ${service_id} */\n"
      "__used\n"
      "static const size_t ${service_id}_crime_data_size[] = {\n"
    )
    foreach(file ${in_files})
      string(REGEX REPLACE "[^A-Za-z0-9_]" "_" var ${file})
      file(APPEND ${crime_res_c} "  ARRAY_SIZE(${var}_crime_data),\n")
    endforeach()
    file(APPEND ${crime_res_c}
      "};\n"
      "\n"
    )

    # service crime URNs
    file(APPEND ${crime_res_c}
      "/* Array of crime uniform resource names for ${service_id} */\n"
      "__used\n"
      "static const char *const ${service_id}_crime_urn[] = {\n"
    )
    foreach(file ${in_files})
      file(APPEND ${crime_res_c} "  \"${file}\",\n")
    endforeach()
    file(APPEND ${crime_res_c}
      "};\n"
      "\n"
    )
  
  target_sources(
    ${target}
    PRIVATE
    ${crime_res_c}
  )
  endfunction()
